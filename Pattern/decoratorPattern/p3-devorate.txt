객체지향 원칙
- 바뀌는 부분은 캡슐화한다
- 상속보다는 구성을 활용한다
- 구현이 아닌 인터페이스에 맞춰서 프로그래밍한다
- 서로 상호작용을 하는 객체 사이에서는 가능하면 느슨하게 결합하는 디자인을 사용해야한다
- OCP(Open Closed Priciple) : 클래스는 확장에대해서는 열려있어야되지만 코드변경에는 닫혀있어야한다. 


decorate-pattern
- 객체의 결합을 통해 기능을 동적으로 유연하게 확장 할 수 있게 해주는 패턴이다.
- OCP(Open Closed Priciple)을 적용하고있다
- 기본 기능에 추가할 수 있는 기능의 종류가 많은 경우에 각 추가 기능을 Decorator 클래스로 정의 한 후 필요한 Decorator 객체를 조합함으로써 추가 기능의 조합을 설계 하는 방식이다.

Ex. 여러 푸드코트중 팝콘가게의 메뉴를 만드는 예시이다. 
    가장 기본메뉴는 팝콘에 콜라이지만 새로운 메뉴가 추가됨에 따라 프레츨, 소세지가 추가될수도 있다. 
