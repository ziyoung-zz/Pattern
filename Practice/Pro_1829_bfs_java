package test;

import java.util.*;


public class test {

	public static void main(String[] args) {
		Solution s = new Solution();
		int[][] picture = {
				{0, 0, 0, 0},
				{0, 2, 1, 0}, 
				{1, 2, 1, 3}, 
				{1, 1, 1, 1}, 
				{0, 0, 0, 3}, 
				{0, 0, 0, 3}
		};
		s.solution(6, 4, picture);
	}	
}
//1829
class Solution {
	
	boolean[][] flag;
	int[][] pic;
	int sizeX;
	int sizeY;
	Queue<Pos> q;

	public int[] solution(int m, int n, int[][] picture) {
		pic = picture;
		sizeX = m;
		sizeY = n;		
		flag = new boolean[sizeX][sizeY];
		q = new LinkedList<Pos>();	
		
		int areaNum = 0;
		int max = 0;
		
		for(int i=0 ; i<sizeX ; i++){
			for(int j=0 ; j<sizeY; j++){
				if(!flag[i][j] && picture[i][j] != 0){										
					Pos pos = new Pos(i,j);
					q.add(pos);
					areaNum+=1;
					flag[i][j] = true;
					int num = picture[i][j];
					int cnt =1;
					//System.out.println(num);
					while(q.size() !=0){
						pos = q.poll();
						//System.out.println(pos.x +"." + pos.y);
						cnt = bfs(num, cnt, pos.x, pos.y);
					}
					
					if(max < cnt) max = cnt;
				}
			}
		}
		
		int[] answer = new int[2];
		answer[0] = areaNum;
		answer[1] = max;		
		System.out.println(areaNum +" " + max);
		return answer;
	}
	
	private int bfs(int num, int cnt, int x, int y){
			
		if(x+1<sizeX && !flag[x+1][y] && pic[x+1][y] == num){
			q.add(new Pos(x+1,y));
			flag[x+1][y] = true;
			cnt+=1;
		}
		
		if(x-1>-1 && !flag[x-1][y] && pic[x-1][y] == num){
			q.add(new Pos(x-1,y));
			flag[x-1][y] = true;
			cnt+=1;
		}
		
		if(y-1>-1 && !flag[x][y-1]  && pic[x][y-1] == num){
			q.add(new Pos(x,y-1));
			flag[x][y-1] = true;
			cnt+=1;
		}
		
		if(y+1<sizeY && !flag[x][y+1]  && pic[x][y+1] == num){
			q.add(new Pos(x,y+1));
			flag[x][y+1] = true;
			cnt+=1;
		}
		
		return cnt;
	}
	
	class Pos{
		int x;
		int y;
		
		Pos(int x, int y){
			this.x = x;
			this.y = y;
		}
	}
}