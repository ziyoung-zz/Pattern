객체지향 원칙
- 바뀌는 부분은 캡슐화한다
- 상속보다는 구성을 활용한다
- 구현이 아닌 인터페이스에 맞춰서 프로그래밍한다
- 서로 상호작용을 하는 객체 사이에서는 가능하면 느슨하게 결합하는 디자인을 사용해야한다
- OCP(Open Closed Priciple) : 클래스는 확장에대해서는 열려있어야되지만 코드변경에는 닫혀있어야한다. 
- 의존성뒤집기원칙 : 구상클래스에 의존하지 않고 추상화된것에 의존하도록 만들어야한다.

4. factory-pattern
*팩토리 메서드 패턴
- 객체 생성 처리를 서브 클래스로 분리해 처리하도록 캡슐화한 패턴이다.
- 어떤 클래스의 인스턴스를 만들지는 서브클래스에서 결정하도록 한다.

class Creator{
	abstract factoryMethod()
	doMethod()		
}
- 제품을 가지고 원하는 일을 하기위한 모든 메소드(doMethod())들이 구현되어 있다.
- 제품을 만들어주는 factoryMethod()는 추상메소드로 정의되어있다.

class ConcreteCreator extends Ceeator{
	factoryMethod()
}
- 실제로 제품을 생산하는 factoryMethod()를 구현한다. 

class Product{
}
class ConcreteProdcut extends Product{
}
- 제품클래스에서는 모두 똑같은 인터페이스를 구현해야한다.

*추상 팩토리 패턴
-서로 연관된, 또는 의존적인 객체들로 이루어진 제품군을 생성하기 위한 인터페이스를 제공한다.
- 클라이언트에서 추상 인터페이스를 통해 일련의 제품들을 공급받을수 있다.

*팩토리 메서드패턴 vs 추상 팩토리 패턴

공통점
: 객체 생성을 캡슐화해서 코드와 구상 형식을 분리시킬수 있게 한다.

차이점
-펙토리메서드패턴
: 상속을 활용하여 객체 생성이 서브클래스에 위임된다.
: 서브클래스에서는 팩토리 메소드를 구현하여 객체를 생산한다.
-추상팩토리패턴
:객체구성을 활용하여 객체 생성이 인터페이스에서 선언판 메소드들에서 구현된다.
: 구상 클래스에 직접의존하지 않고도 서로 관련된 객체들로 이루어진 제품군을 만들기위한 용도로 사용된다.